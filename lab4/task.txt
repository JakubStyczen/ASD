Zaimplementuj listę z przeskokami (skip-list) poprzez stworzenie klasy zawierającej atrybut reprezentujący głowę listy (np. head) oraz metody:
konstruktor z parametrem określającym maksymalną 'wysokość' elementu listy - powinien tworzyć pusty element listy, którego tablica wskazań na następne elementy będzie reprezentowała tablicę głów list na poszczególnych poziomach, ten element ma zostać przypisany do atrybutu head
search - wyszukująca i zwracająca wartość odpowiadającą podanemu kluczowi (lub None)
insert - wstawiająca daną wg podanego klucza - podczas szukania miejsca do wstawienia klucza powinna tu być tworzona lista  (tablica) zawierająca poprzedniki  znalezionego elementu  na każdym poziomie (znaleziony element to ten, którego klucz jest większy od klucza wstawianego elementu); dla poziomów, których znaleziony element nie posiada  w tablicy poprzedników powinna być wpisana głowa listy (np. head).
remove - usuwająca daną o podanym kluczu
__str__ -  wypisującą listę w postaci par (klucz:wartość) (należy wypisać 'poziom 0' listy) 
Elementy listy również powinny być zaimplementowane jako klasa z atrybutami przechowującymi: klucz,  wartość (jakąś daną), liczbę poziomów oraz listę (tablicę) ze wskazaniami na następny element o rozmiarze równym liczbie poziomów.
Do tworzenia elementów listy będzie przydatna funkcja/metoda losująca liczbę poziomów (jako metoda nie musi mieć parametru maxLevel, p zaś będziemy ustawiali na 0.5):
def randomLevel(p, maxLevel):
  lvl = 1   
  while random() < p and lvl <maxLevel:
        lvl = lvl + 1
  return lvl

W celach testowych przydatna  też będzie funkcja/metoda:  wypisująca całą listę (wszystkie poziomy) przez wypisanie kluczy na każdym z poziomów . Można w tym celu zaadoptować poniższą funkcję:
    def displayList_(self):
        node = self.head.next[0]  # pierwszy element na poziomie 0
        keys = []                           # lista kluczy na tym poziomie
        while(node != None):
            keys.append(node.key)
            node = node.next[0]

        for lvl in range(maxLevel-1, -1, -1):
            print("{}: ".format(lvl), end=" ")
            node = self.head.next[lvl]
            idx = 0
            while(node != None):                
                while node.key>keys[idx]:
                    print("  ", end=" ")
                    idx+=1
                idx+=1
                print("{:2d}".format(node.key), end=" ")     
                node = node.next[lvl]    
            print("")
 
W main-ie sprawdź działanie zaimplementowanej listy przez:
utworzenie pustej listy
użycie insert do wpisana do niej 15 danych (niech kluczami będą  kolejne liczby od 1, a wartościami - kolejne litery),
wypisanie listy
użycie search do wyszukania (i wypisania) danej o kluczu 2
użycie insert do nadpisania wartości dla klucza 2 literą 'Z'
użycie search do wyszukania (i wypisania) danej o kluczu 2
użycie delete do usunięcia danych o kluczach 5, 6, 7
wypisanie tablicy
użycie insert do wstawienia  danej 'W' o kluczu 6
wypisanie tablicy

Dla końcowego sprawdzenia ponownie wykonaj powyższe operacje, ale tym razem wpisując 15 wartości w odwrotnej kolejności - od 15 do 1.







Zaimplementuj tablicę mieszającą w postaci klasy zawierającej 'tablicę statyczną', np.:
tab = [None for i in range(size)]
gdzie size jest parametrem 'konstruktora'.

Klasa powinna mieć zaimplementowaną metodę realizującą funkcję mieszającą, obliczającą modulo rozmiaru tablicy oraz metodę rozwiązującą kolizję metodą adresowania otwartego (z próbkowaniem kwadratowym, gdzie c1 i c2 powinny być parametrami konstruktora z domyślnym ustawieniem odpowiednio 1 i 0 - czyli domyślnie mamy próbkowanie liniowe). Zakładamy, że funkcja mieszająca może otrzymać wprost liczbę, lub napis - wówczas należy go zamienić na liczbę poprzez zsumowanie kodów ASCII wszystkich jego liter (funkcja ord).

Następnie należy zaimplementować metody:
konstruktor (z parametrami: rozmiar tablicy oraz c1, c2  jak powyżej) tworzący pustą tablicę (wypełnioną None-ami)
search - wyszukująca i zwracająca wartość odpowiadającą podanemu kluczowi (lub None w wypadku nieznalezienia)
insert - wstawiająca daną wg podanego klucza, jeżeli element o takim kluczu istnieje, jego wartość powinna zostać nadpisana
remove - usuwająca daną o podanym kluczu (początkowo zaimplementuj usuwanie przez wpisanie None w  miejsce wskazane przez wyliczony indeks).
__str__ -  wypisującą tablicę w postaci par {klucz:wartość, ...} - tak jak wypisywany jest pythonowy słownik; 'Puste' miejsce niech będzie wypisywane jako None
Metody insert i remove powinny w jakiś sposób informować o niepowodzeniu (insert - brak miejsca, remove - brak danej o podanym kluczu). Może to być np. wyjątek lub zwracana wartość None. W takim wypadku w miejscu wywołania niech pojawia się komunikaty "Brak miejsca" i "Brak danej".
  
Elementy tablicy również powinny być zaimplementowane jako klasa z dwoma atrybutami przechowującymi: klucz oraz  wartość (jakąś daną).

W main-ie sprawdź działanie zaimplementowanej tablicy przez stworzenie dwóch funkcji testujących. Niech te funkcje mają takie same parametry jak 'konstruktor' tablicy mieszającej.
Pierwsza niech przetestuje tablicę przez:
utworzenie pustej tablicy o rozmiarze 13 i próbkowaniem liniowym
użycie insert do wpisana do niej 15 danych Niech kluczami będą  kolejne liczby od 1 (ZA WYJĄTKIEM 6 i 7, zamiast których kluczami powinny być 18 i 31), a wartościami - kolejne litery od 'A'.
wypisanie tablicy
użycie search do wyszukania (i wypisania) danej o kluczu 5
użycie search do wyszukania (i wypisania) danej o kluczu 14
użycie insert do nadpisania wartości dla klucza 5 wartością 'Z'
użycie search do wyszukania (i wypisania) danej o kluczu 5
użycie remove do usunięcia danej o kluczu 5
wypisanie tablicy
użycie search do wyszukania (i wypisania) danej o kluczu 31
W tym miejscu zaobserwujemy problem z usuwaniem elementów tablic mieszających z adresowaniem otwartym.
Zaproponuj i zrealizuj rozwiązanie tego problemu (w razie trudności zwróć się o podpowiedź do Prowadzącego zajęcia)  

Ponownie uruchom program w celu sprawdzenia czy tym razem tablica działa poprawnie.

Wprowadź do tablicy insertem daną o wartości 'W'  z kluczem 'test' i ponownie wypisz tablicę.

Utwórz drugą funkcję testującą wpisującą takie same wartości do tablicy jak poprzednio (kolejne litery), ale niech ich klucze będą wielokrotnościami wartości 13 (zaczynając od 13). Niech funkcja tylko wypisuje uzyskaną tablicę.
Uruchom funkcję z próbkowaniem liniowym. Zaobserwuj czy wszystkie miejsca w tablicy zostały zajęte.
Ponownie wywołaj drugą funkcję zmieniając próbkowanie na kwadratowe (parametry c konstruktora: 0, 1). Zaobserwuj zajętość tablicy.
Zawołaj pierwszą funkcję testującą z próbkowaniem kwadratowym (parametrami  c dla konstruktora: 0, 1). Zaobserwuj zajętość tablicy oraz brak danej  'M'.


