Celem ćwiczenia jest implementacja kolejki priorytetowej jako kopca (maksymalnego) zrealizowanego w postaci tablicy. Jako tablicę można wykorzystać listę pythonową (albo z natywną obsługą, albo realokowaną  'ręcznie' jak w zadaniu z tablicą cykliczną).

Tym razem implementacja kolejki priorytetowej będzie niezależna od danych w niej przechowywanych. Kolejka będzie tablicą DOWOLNYCH elementów, jedynym wymogiem jest to aby można było te elementy uporządkować (czyli np. muszą być na nich zdefiniowane relacje < i >). W konsekwencji, jeżeli nawet kolejka będzie zawierać obiekty jakiejś klasy to składowe tej klasy nie mają być przez kolejkę znane (w naszym przykładzie będą prywatne).

Element kolejki niech będzie obiektem klasy, której atrybutami będą __dane i __priorytet. Ta klasa powinna mieć zdefiniowane 'magiczne' metody pozwalające na użycie na jej obiektach operatorów < i >  (metody __lt__ i __gt__) oraz wypisanie ich print-em (__str__) w postaci
 priorytet : dane.
Dzięki zastosowaniu operatorów < i > atrybuty __dane i  __priorytet mogą (i powinny być) prywatne.

Klasa reprezentująca kolejkę powinna zawierać pola przechowujące:  tablicę i  jej aktualny rozmiar (w implementacji używającej standardowej listy pythonowej to pole nie musi wystąpić) oraz następujące metody:
konstruktor tworzący pustą kolejkę
is_empty - zwracająca True jeżeli kolejka jest pusta
peek - zwracająca None jeżeli kolejka jest pusta lub element kolejki o najwyższym priorytecie (czyli największej wartości atrybutu __priorytet)
dequeue - zwracająca None jeżeli kolejka jest pusta lub element kolejki o najwyższym priorytecie (zdejmując go z wierzchołka kopca)
enqueue - otrzymująca dane do wstawienia do kolejki (kopca)  - tym razem będzie to cały obiekt klasy implementującej element kolejki. UWAGA - element początkowo jest dokładany na koniec KOPCA, więc:
jeżeli rozmiar kopca bedzie taki jak rozmiar tablicy, to będzie oznaczało append,
a jeżeli będzie mniejszy to będzie to oznaczało zastąpienie istniejącego elementu tablicy. 
Kopiec będzie jeszcze przydatny w sortowaniu, dlatego przy jego implementacji warto zadbać aby:
-  metodę deqeue tak zaimplementować, aby nie zmniejszać listy a jedynie zapamietywać aktualną 'długość' kopca (chodzi o to aby nie usuwać 'fizycznie' ostatniego elementu)
- z dequeue wydzielić pętlę naprawiającą kopiec jako osobną metodę otrzymującą jako argument indeks węzła od którego zaczynamy naprawę (teraz będzie to 0, ale w sortowaniu pojawią się inne indeksy).

Dodatkowo, aby usprawnić poruszanie się po kopcu, proszę napisać metody left i right, które otrzymawszy indeks węzła zwracają indeks odpowiednio lewego i prawego potomka, oraz metodę parent, która na podstawie indeksu węzła zwraca indeks jego rodzica.

Należy także utworzyć funkcje/metody:  wypisująca kolejkę jak słownik (elementy tablicy jako pary priorytet : dane rozdzielone przecinkami, całość w nawiasach { }) i wypisująca kolejkę jak drzewo.
Do wypisania jak słownik  proszę wykorzystać poniższy kod (który można przerobić celem dostosowania do własnej implementacji):
    def print_tab(self):
        print ('{', end=' ')
        print(*self.tab[:self.heap_size], sep=', ', end = ' ')
        print( '}')

Do wypisania drzewa proszę wykorzystać poniższy kod (który można przerobić celem dostosowania do własnej implementacji):
    def print_tree(self, idx, lvl):
        if idx<self.size:           
            self.print_tree(self.right(idx), lvl+1)
            print(2*lvl*'  ', self.tab[idx] if self.tab[idx] else None)           
            self.print_tree(self.left(idx), lvl+1)

Celem wypisania drzewa należałoby tak wywołać powyższą metodę:
    kol_prior.print_tree(0, 0);

UWAGA:
Proszę pamiętać, że w każdej operacji dodania/usunięcia warunek kopca ma zostać zachowany. Przywracanie warunku kopca ma mieć złożoność O(log n),
czyli nie może polegać na przeglądnięciu wszystkich elementów posiadających potomków (to byłaby złożoność O(n)).
Z tego samego powodu nie można używać list.index (złożoność O(n))
 
W main-ie sprawdź działanie zaimplementowanej kolejki przez:
utworzenie pustej kolejki
użycie w pętli enqueue do wpisana do niej elementów których priorytety będą brane z listy [7, 5, 1, 2, 5, 3, 4, 8, 9], a odpowiadające im wartości będą kolejnymi literami z napisu "GRYMOTYLA"
wypisanie aktualnego stanu kolejki w postaci kopca
wypisanie aktualnego stanu kolejki w postaci tablicy
użycie dequeue do odczytu  pierwszej  danej z kolejki, proszę ją zapamiętać
użycie  peek do odczytu i wypisania kolejnej  danej
wypisanie aktualnego stanu kolejki w postaci tablicy
wypisanie zapamiętanej, usuniętej pierwszej danej z kolejki
opróżnienie kolejki z wypisaniem usuwanych danych (użycie dequeue w pętli dopóki w kolejce będą dane)
wypisanie opróżnionej kolejki w postaci tablicy (powinno się wypisać { } )



Zaimplementuj w języku Python uproszczoną wersję b-drzewa. Należy zaimplementować jedynie funkcję insert dodającą element do drzewa. Ponadto dla uproszczenia założymy, że:
maksymalna liczba elementów w węźle jest nieparzysta (a więc pełny węzeł ma parzystą liczbę potomków). 
dodawanymi elementami będą same klucze (pomijamy dane, które zazwyczaj towarzyszą kluczom)
w wypadku, gdy węzeł, do którego ma być dodany element, jest pełny następuje jego podział (nie ma próby przesunięcia elementów do sąsiednich węzłów) 
nie sprawdzamy czy próbujemy wstawić już istniejący klucz 
Możliwa implementacja - dwie klasy: 
pierwsza klasa zawiera pole  wskazujące na korzeń drzewa, pole zawierające maksymalną liczbę potomków (lub maksymalną liczbę elementów w węźle) ustawiane przy tworzeniu obiektu tej klasy oraz metodę insert dodającą klucz i metodę wypisującą drzewo
druga klasa zawiera dwa pola: keys (lista kluczy), children (lista potomków).
W omawianej tu implementacji metoda insert zwraca informację czy wstawianie klucza spowodowało podział potomka (parę - element środkowy z podziału i utworzony w jego trakcie węzeł)
Metoda insert zaczyna od przeszukania aktualnego węzła w poszukiwaniu klucza większego od wstawianego. Po znalezieniu sprawdza czy aktualny węzeł jest liściem :
 - jeżeli tak dodaje klucz (warto tu zrobić osobną funkcję dodającą do węzła - jest ona opisana poniżej), 
 - jeżeli nie - woła się rekurencyjnie dla 'lewego potomka' znalezionego klucza (w wypadku gdy wstawiany klucz jest większy od wszystkich w węźle to będzie to ostatni potomek)
Po powrocie z rekurencji może się okazać, że potomek do którego przeszliśmy został podzielony -  tak więc należy dodać do aktualnego węzła środkowy klucz z podziału i wskazanie na nowo-utworzony węzeł (ta sama funkcja dodająca do węzła co w poprzednim przypadku)
Funkcja dodająca do węzła otrzymuje jako parametry dodawany klucz oraz ewentualne wskazanie na nowo-utworzony węzeł ze swego poprzedniego wywołania. Musi ona sprawdzić, czy węzeł nie jest pełny (jeżeli tak to podzielić go przepisując zarówno keys jak i children) i wpisać w odpowiednie miejsce klucz (do listy keys) oraz ewentualne wskazanie na potomka (do listy children). Jeżeli nastąpił podział funkcja zwraca środkowy klucz z podziału i wskazanie na utworzony w nowy węzeł. Jeżeli podziału nie było - można zwrócić None.

Na koniec metody insert należy sprawdzić, czy nie nastąpiło podzielenie root-a - wtedy trzeba utworzyć nowego roota z jednym elementem (środkiem podziału) i wskazaniami na węzeł utworzony w podziale i na 'starego' root-a.
   

Poniższe funkcje mogą się przydać w tworzeniu metody wypisującej drzewo. Założono tu, że struktura danych opisująca węzeł to klasa zawierająca pola:
keys - tablica (lista) kluczy
children -  tablica (lista) potomków
size - liczba elementów w tablicy keys
oraz, że liście też posiadają listę dzieci (wszystkie==None)

    def print_tree(self):
        print("==============")
        self._print_tree(self.root, 0)
        print("==============")

    def _print_tree(self, node, lvl):
        if node!=None:
            for i in range(node.size+1): 	                	
                self._print_tree(node.children[i], lvl+1)
                if i<node.size:
                    print(lvl*'  ', node.keys[i])	

Oczywiście powyższe metody trzeba dostosować do własnej implementacji.

W main-ie:
utwórz puste drzewo o maksymalnej liczbie potomków równej 4
dodaj do niego elementy (będące jednocześnie kluczami) po kolei z listy: [5, 17, 2, 14, 7, 4, 12, 1, 16, 8, 11, 9, 6, 13, 0, 3, 18 , 15, 10, 19]
wyświetl drzewo
utwórz drugie puste drzewo, dodaj do niego 20 kolejnych liczb od 0 do 19 (będą to te same liczby co w liście ale dodane w kolejności rosnącej)
wyświetl stworzone drzewo (zauważ jak różni się od poprzedniego)
dodaj do drugiego drzewa kolejne liczby od 20 do 199, wyświetl drzewo (zauważ jak wzrosła jego wysokość)
utwórz trzecie puste drzewo o maksymalnej liczbie potomków równej 6, dodaj do niego te same liczby co do drugiego drzewa (od 0 do 199) i wyświetl go (zauważ jak zmalała jego wysokość)
