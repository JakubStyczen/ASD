Celem ćwiczenia jest wykorzystanie realokowalnej tablicy jako 'bazy' do stworzenia kolejki. Ze względu na to, że Python ma wbudowaną obsługę tablic dynamicznych i sam zarządza pamięcią, stworzenie w nim tablicy z 'ręczną' realokacją wymaga przyjęcia pewnych ograniczeń:
tablicę implementujemy jako listę o zadanym rozmiarze np:
tab = [None for i in range(size)]
Poza tym wprowadzimy 'protezę' na funkcję realloc:
def realloc(tab, size):
    oldSize = len(tab)
    return [tab[i] if i<oldSize else None  for i in range(size)]

Używając powyższych konstrukcji zaimplementuj kolejkę wykorzystując tablicę cykliczną.
Zdefiniuj klasę reprezentującą kolejkę.  Reprezentacja kolejki powinna zawierać pola przechowujące:  tablicę, jej aktualny rozmiar, indeks miejsca zapisu do kolejki i indeks miejsca odczytu z kolejki.
Następnie należy zaimplementować metody:
konstruktor tworzący pustą kolejkę - ALE ma tu powstać  5-cio elementowa tablica  (na razie pusta), rozmiar będzie ustawiony na 5 a oba indeksy na 0.
is_empty - zwracająca True jeżeli indeks miejsca odczytu jest równy indeksowi miejsca zapisu
peek - zwracająca daną z miejsca odczytu lub None dla pustej kolejki
dequeue - usuwa z początku kolejki (miejsca odczytu), zwraca None jeżeli kolejka jest pusta lub daną z miejsca odczytu (wtedy przed zwróceniem danej przesuwa się indeks miejsca odczytu o 1 z uwzględnieniem ewentualnego zapętlenia na końcu tablicy).
enqueue - otrzymująca dane do wstawienia na koniec kolejki kolejki, po wstawieniu której należy przesunąć indeks miejsca zapisu o 1 z uwzględnieniem ewentualnego zapętlenia na końcu tablicy. Jeżeli po przesunięciu oba indeksy są takie same należy dwukrotnie powiększyć tablicę przez realokację oraz odpowiednio rozsunąć dane - wszystko od od miejsca 'spotkania' indeksów do 'starego' końca tablicy musi być przemieszczone na koniec powiększonej tablicy. Należy pamiętać o odpowiednim uaktualnieniu rozmiaru tablicy oraz indeksu miejsca odczytu.
__str__ do wypisywania printem obiektu stworzonej klasy ciąg jako wartości od początku kolejki do jej końca zapisany w nawiasach [ ] (tak jak lista pythonowa).
W celach testowych przydatna  też będzie metoda  wypisująca tablicę (czyli listę pythonową w której jest zaimplementowana kolejka).
 
W main-ie sprawdź działanie zaimplementowanej kolejki przez:
utworzenie pustej kolejki
użycie enqueue do wpisana do niej  4 danych - kolejnych liczb od 1 do 4,
użycie dequeue do odczytu pierwszej wpisanej danej i wypisanie jej
użycie  peek do odczytu drugiej  wpisanej danej i wypisanie jej
testowe wypisanie aktualnego stanu kolejki (wpisanych danych od początku kolejki (indeks odczytu) do jej końca (indeks zapisu))
użycie enqueue do wpisana do kolejki następnych 4 danych - kolejnych liczb od 5 do 8,
testowe wypisanie aktualnego stanu tablicy (czyli wewnętrznej reprezentacji)
opróżnienie kolejki z wypisaniem usuwanych danych (użycie dequeue w pętli dopóki w kolejce będą dane)
wypisanie kolejki (powinna być pusta)



Zaimplementuj  rozwiniętą listę wiązaną (ang. unrolled linked list).  Zdefiniuj klasę reprezentującą element takiej listy - powinien on zawierać 'stałą' tablicę (stworzoną analogicznie jak w poprzednim zadaniu - jej rozmiar może być pamiętany w zmiennej globalnej), jej aktualne wypełnienie (czyli liczbę aktualnie znajdujących się w niej elementów) oraz wskazanie na następny element listy. Dodatkowo przydatne będą metody wstawiająca i usuwająca w miejscu wskazanym przez indeks (z przesunięciem pozostałych elementów).

Następnie należy zaimplementować klasę reprezentującą listę, zawierającą metody:
konstruktor tworzący pustą listę
get - pobierająca daną spod podanego indeksu
insert - wstawiająca daną w miejscu wskazanym przez podany indeks, przesuwając istniejące elementy w prawo;  jeżeli tablica elementu w którym ma nastąpić wstawienie jest pełna to do listy dokładany jest nowy element, połowa zapełnionej tablicy jest przenoszona do nowego elementu i wstawienie danej zachodzi albo w opróżnianym elemencie albo we wstawianym (w zależności gdzie 'wypada' miejsce wskazane przez indeks). Podanie indeksu większego od aktualnej liczby elementów listy skutkuje dodaniem elementu na końcu listy.
delete - usuwająca  daną spod podanego indeksu - dodatkowo jeżeli tablica jest zapełniona mniej niż w połowie z następnego elementu listy jest do niej przenoszony pierwszy element tablicy; jeżeli to przeniesienie spowoduje, że zapełnienie tablicy w tym następnym elemencie spadnie poniżej połowy wtedy wszystkie je elementy są przenoszone do tablicy we wcześniejszym elemencie listy (tej, z której usuwana była dana), a element listy z pustą już tablicą jest usuwany.
W celach testowych przydatna będzie funkcja/metoda wypisująca całą listę.
 
Sprawdź działanie zaimplementowanej listy:
niech zmienna reprezentująca rozmiar tablicy ma wartość 6
utwórz pustą listę
wywołaj w pętli metodę insert do wpisana do listy kolejno 9-ciu danych (kolejnych liczb od 1 do 9)
użyj get do wypisania elementu listy o indeksie 4  (numeracja od 0)
użyj insert do wstawienia do listy kolejnych 2-ch danych (10 i 11) pod indeksy: 1 i 8
wypisz aktualny stan listy
użyj delete do usunięcia z listy  danych spod indeksów 1 i 2
wypisz aktualny stan listy
