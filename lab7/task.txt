Celem ćwiczenia jest zaimplementowanie dwóch najpopularniejszych reprezentacji grafów - macierzy sąsiedztwa i listy sąsiedztwa.

Postaramy się stworzyć jeden wspólny interfejs dla obu implementacji. Stworzymy w obu implementacjach dodatkową listę węzłów gdyż co prawda metody obsługujące graf będą odwoływały się do węzłów, ale implementacja macierzy sąsiedztwa oraz jedno z podejść do listy sąsiedztwa posługuje się indeksami (z tej dodatkowej listy). Celem szybszego wyszukiwania indeksu węzła można stworzyć dodatkowy słownik konwertujący węzeł na jego indeks w liście węzłów.

Klasy implementujące grafy powinny mieć następujące metody:
   konstruktor - tworzący pusty graf
    isEmpty( ) - zwracająca True jeżeli graf jest pusty
    insertVertex(vertex)    - wstawia do grafu  podany węzeł
    insertEdge(vertex1, vertex2, egde) - wstawia do grafu krawędź pomiędzy podane węzły
    deleteVertex(vertex) - usuwa podany węzeł
    deleteEdge(vertex1, vertex2) - usuwa krawędź pomiędzy podanymi węzłami       

Dodatkowo przydatne będą metody metody:
    getVertexIdx(vertex)      - zwraca indeks węzła (wykorzystując metodę indeks lub wspomniany słownik)
    getVertex(vertex_idx)    - zwraca węzeł o podanym indeksie (niejako odwrotność powyższej metody)
    neighboursIdx(vertex_idx) - zwraca listę indeksów węzłów przyległych do węzła o podanym indeksie (połączenia wyjściowe) LUB
    neighbours(vertex_idx) - zwraca listę węzłów przyległych do węzła o podanym indeksie (połączenia wyjściowe)
    order()                          - zwraca rząd grafu (liczbę węzłów)
    size()                            - zwraca rozmiar grafu (liczbę krawędzi)

Ponadto na potrzeby dzisiejszych zadań  potrzeba będzie metoda:
    edges() - zwracająca wszystkie krawędzie grafu w postaci listy par: (klucz_węzła_początkowego, klucz_węzła_końcowego) - będzie potrzebna do wyrysowania grafu.

Niezależnie od implementacji grafu będziemy potrzebowali opisu węzła i opisu krawędzi. Zadbamy o to, żeby graf nie musiał znać wewnętrznej reprezentacji węzła (czyli nie musi wiedzieć CO w grafie jest przechowywane, ma wiedzieć JAK jest to powiązane ze sobą). Dlatego węzeł powinien być opisany osobną klasą, która ma jedynie przechowywać dane. Jedna z tych danych będzie kluczem jednoznacznie identyfikującym węzeł.
Aby uniezależnić implementację grafu od klasy opisującej węzeł proszę w tej klasie umieścić metody:
__eq__ (porównującą węzły wg klucza - czyli wybranego pola identyfikującego węzeł) oraz __hash__ (wykorzystywaną przez słownik, zwracająca klucz). Metoda __hash__ powinna mieć postać:

    def __hash__(self):
        return hash(self.key)

gdzie key jest przykładową nazwą pola, które będzie służyło do identyfikacji węzła (np. dziś będzie to litera z tablicy rejestracyjnej).
Dzięki temu graf będzie mógł w swoim słowniku używać całego węzła jako ideksu zamiast podawania konkretnego klucza.

Reprezentacja krawędzi ważonych dziś nie będzie wykorzystywana, ale na przyszłość dobrze będzie ją przewidzieć. Dziś w macierzy sąsiedztwa jako edge w insertEdge będzie wstawiane 1, ale ogólnie może to być dowolny obiekt. Natomiast proponuję, aby konstruktor miał dodatkowy parametr określający jaką wartością zainicjować macierz - jej wartość domyślna niech wynosi 0, ale warto mieć możliwość innej inicjacji np. wartością None.

Implementacja macierzy może wykorzystać listę list celem utworzenia macierzy (analogicznie jak w zadaniu z pierwszych ćwiczeń)

Implementacja listy może zostać wykonana na różne sposoby.  Klasycznie jest to lista list zawierających indeksy sąsiadów.  Przy czym to rozwiązanie nie obejmuje krawędzi ważonych.
Stąd lepsze wydaje się stworzenie słowników sąsiadów zamiast list sąsiadów (dziś wartości w tych słownikach byłyby puste, ale w przyszłości mogą to być dowolne obiekty).
Można też rozważyć rezygnację z indeksów na rzecz węzłów (czyli zamiast indeksów pamiętać sąsiednie węzły). W takim wypadku jednak listę słowników trzeba zastąpić słownikiem węzłów, którego wartościami będą słowniki sąsiadów.

Przy usuwaniu węzła należy pamiętać, że  trzeba go (albo jego indeks) usunąć ze wszystkich list/słowników sąsiadów. 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
W ćwiczeniu należy stworzyć graf odwzorowujący sąsiedztwa polskich województw. Jako dane początkowe udostępniona jest mapa Polski (https://fotoomnia.com/photo/Mapa-Konturowa-659 - przeskalowana) oraz plik polska.py KTÓREGO NIE NALEŻY UZUPEŁNIAĆ/MODYFIKOWAĆ. Pracę zaczynamy od utworzenia własnego pliku w którym umieszczamy import polska. Plik polska.py zawiera reprezentację grafu sąsiedztwa województw w postaci listy krawędzi (pod nazwą graf). Daną przechowywaną w węzłach są pierwsze litery tablic rejestracyjnych danego województwa. Ponadto kod zawiera funkcję wyświetlającą graf na mapie  - draw_map - która powinna dostać jako argument listę zwracaną przez metodę edges. (Jak działa funkcja można szybko sprawdzić wołając polska.draw_map(polska.graf)) 

UWAGA - dziś uruchamia się środowisko graficzne w którym powinny pojawić się 2 okna - okno z mapą i konsola. Mogą wystąpić problemy typu:
 - nie widać konsoli - prawdopodobnie przysłania ją okno grafu.
 - przez dłużej niż 10 sekund nic się nie pokazuje (niebieski pusty ekran) - kliknięcie powinno spowodować wyświetlenie konsoli z komunikatem błędu.

Państwa zadaniem jest stworzenie grafów w obu implementowanych reprezentacjach i wykonanie na nich podanych niżej operacji. Ponieważ interfejsy obu klas są identyczne, więc kod testujący powinien być wspólny dla obu grafów.
Na początek należy stworzyć graf korzystając z podanej listy krawędzi (z użyciem metod insertVertex i insertEdge).
Następnie należy usunąć z grafu województwo małopolskie (deleteVertex) oraz połączenia między mazowieckim i łódzkimi (deleteEdge).
Poprawność należy sprawdzić przez wyświetlenie stworzonych grafów (draw_map). 














Używając implementacji z poprzedniego ćwiczenia należy napisać funkcję, która otrzyma graf i "pokoloruje" go metodą zachłanną przechodząc go w kolejności DFS lub BFS w zależności po podanego parametru (zarówno kolejkę jak i stos można zaimplementować jako listę pythonową, gdzie w jednym przypadku element jest pobierany przez pop(0) a w  drugim przez pop()). Kolory będą reprezentowane przez kolejne liczby. Dwa sąsiednie województwa nie mogą mieć tego samego koloru.
Kolorowanie można zwizualizować funkcją  draw_map podając jej jako drugi argument listę par (litera_województwa, kolor) - wówczas litery województw zostaną zastąpione numerami (czyli "kolorami").   
Funkcję należy przetestować na grafie w początkowej postaci (czyli z małopolską i połączeniami łódzkie-mazowieckie). To czy graf będzie zaimplementowany jao lista czy jako  tablica nie powinno to mieć znaczenia (funkcja powinna używać  interfejsu wspólnego dla obu implementacji).
Zaobserwuj maksymalną liczbę kolorów, która jest potrzebna przy przechodzeniu DFS i BFS.

